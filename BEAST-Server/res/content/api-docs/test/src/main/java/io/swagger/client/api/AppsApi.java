/*
 * Private API
 * Assessment Private API - Do not use!
 *
 * OpenAPI spec version: 0.1
 * Contact: helpdesk@codeinspect.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AbstractApp;
import java.io.File;
import io.swagger.client.model.ModelAPIException;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppsApi {
    private ApiClient apiClient;

    public AppsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getInstalledAppInfo
     * @param devid The id of device (required)
     * @param appid The id of app (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInstalledAppInfoCall(Integer devid, String appid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/devices/{devid}/apps/{appid}"
            .replaceAll("\\{" + "devid" + "\\}", apiClient.escapeString(devid.toString()))
            .replaceAll("\\{" + "appid" + "\\}", apiClient.escapeString(appid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInstalledAppInfoValidateBeforeCall(Integer devid, String appid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'devid' is set
        if (devid == null) {
            throw new ApiException("Missing the required parameter 'devid' when calling getInstalledAppInfo(Async)");
        }
        // verify the required parameter 'appid' is set
        if (appid == null) {
            throw new ApiException("Missing the required parameter 'appid' when calling getInstalledAppInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getInstalledAppInfoCall(devid, appid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Shows information about a specific app
     * Shows information about a specific app
     * @param devid The id of device (required)
     * @param appid The id of app (required)
     * @return AbstractApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractApp getInstalledAppInfo(Integer devid, String appid) throws ApiException {
        ApiResponse<AbstractApp> resp = getInstalledAppInfoWithHttpInfo(devid, appid);
        return resp.getData();
    }

    /**
     * Shows information about a specific app
     * Shows information about a specific app
     * @param devid The id of device (required)
     * @param appid The id of app (required)
     * @return ApiResponse&lt;AbstractApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractApp> getInstalledAppInfoWithHttpInfo(Integer devid, String appid) throws ApiException {
        com.squareup.okhttp.Call call = getInstalledAppInfoValidateBeforeCall(devid, appid, null, null);
        Type localVarReturnType = new TypeToken<AbstractApp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Shows information about a specific app (asynchronously)
     * Shows information about a specific app
     * @param devid The id of device (required)
     * @param appid The id of app (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInstalledAppInfoAsync(Integer devid, String appid, final ApiCallback<AbstractApp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInstalledAppInfoValidateBeforeCall(devid, appid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractApp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInstalledApps
     * @param devid The id of device (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInstalledAppsCall(Integer devid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/devices/{devid}/apps"
            .replaceAll("\\{" + "devid" + "\\}", apiClient.escapeString(devid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInstalledAppsValidateBeforeCall(Integer devid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'devid' is set
        if (devid == null) {
            throw new ApiException("Missing the required parameter 'devid' when calling getInstalledApps(Async)");
        }
        
        com.squareup.okhttp.Call call = getInstalledAppsCall(devid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists installed apps
     * Lists installed apps
     * @param devid The id of device (required)
     * @return List&lt;AbstractApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AbstractApp> getInstalledApps(Integer devid) throws ApiException {
        ApiResponse<List<AbstractApp>> resp = getInstalledAppsWithHttpInfo(devid);
        return resp.getData();
    }

    /**
     * Lists installed apps
     * Lists installed apps
     * @param devid The id of device (required)
     * @return ApiResponse&lt;List&lt;AbstractApp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AbstractApp>> getInstalledAppsWithHttpInfo(Integer devid) throws ApiException {
        com.squareup.okhttp.Call call = getInstalledAppsValidateBeforeCall(devid, null, null);
        Type localVarReturnType = new TypeToken<List<AbstractApp>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists installed apps (asynchronously)
     * Lists installed apps
     * @param devid The id of device (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInstalledAppsAsync(Integer devid, final ApiCallback<List<AbstractApp>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInstalledAppsValidateBeforeCall(devid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AbstractApp>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installApplication
     * @param devid The id of device (required)
     * @param file  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installApplicationCall(Integer devid, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/devices/{devid}/apps/installApplication"
            .replaceAll("\\{" + "devid" + "\\}", apiClient.escapeString(devid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installApplicationValidateBeforeCall(Integer devid, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'devid' is set
        if (devid == null) {
            throw new ApiException("Missing the required parameter 'devid' when calling installApplication(Async)");
        }
        
        com.squareup.okhttp.Call call = installApplicationCall(devid, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Installs an app
     * Uploads a file and installs it as an app
     * @param devid The id of device (required)
     * @param file  (optional)
     * @return AbstractApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractApp installApplication(Integer devid, File file) throws ApiException {
        ApiResponse<AbstractApp> resp = installApplicationWithHttpInfo(devid, file);
        return resp.getData();
    }

    /**
     * Installs an app
     * Uploads a file and installs it as an app
     * @param devid The id of device (required)
     * @param file  (optional)
     * @return ApiResponse&lt;AbstractApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractApp> installApplicationWithHttpInfo(Integer devid, File file) throws ApiException {
        com.squareup.okhttp.Call call = installApplicationValidateBeforeCall(devid, file, null, null);
        Type localVarReturnType = new TypeToken<AbstractApp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Installs an app (asynchronously)
     * Uploads a file and installs it as an app
     * @param devid The id of device (required)
     * @param file  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installApplicationAsync(Integer devid, File file, final ApiCallback<AbstractApp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installApplicationValidateBeforeCall(devid, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractApp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uninstallApplication
     * @param devid The id of device (required)
     * @param appid The id of app (required)
     * @param file  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uninstallApplicationCall(Integer devid, String appid, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/devices/{devid}/apps/{appid}"
            .replaceAll("\\{" + "devid" + "\\}", apiClient.escapeString(devid.toString()))
            .replaceAll("\\{" + "appid" + "\\}", apiClient.escapeString(appid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uninstallApplicationValidateBeforeCall(Integer devid, String appid, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'devid' is set
        if (devid == null) {
            throw new ApiException("Missing the required parameter 'devid' when calling uninstallApplication(Async)");
        }
        // verify the required parameter 'appid' is set
        if (appid == null) {
            throw new ApiException("Missing the required parameter 'appid' when calling uninstallApplication(Async)");
        }
        
        com.squareup.okhttp.Call call = uninstallApplicationCall(devid, appid, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Uninstalls an app
     * Uninstalls an app
     * @param devid The id of device (required)
     * @param appid The id of app (required)
     * @param file  (optional)
     * @return AbstractApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractApp uninstallApplication(Integer devid, String appid, File file) throws ApiException {
        ApiResponse<AbstractApp> resp = uninstallApplicationWithHttpInfo(devid, appid, file);
        return resp.getData();
    }

    /**
     * Uninstalls an app
     * Uninstalls an app
     * @param devid The id of device (required)
     * @param appid The id of app (required)
     * @param file  (optional)
     * @return ApiResponse&lt;AbstractApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractApp> uninstallApplicationWithHttpInfo(Integer devid, String appid, File file) throws ApiException {
        com.squareup.okhttp.Call call = uninstallApplicationValidateBeforeCall(devid, appid, file, null, null);
        Type localVarReturnType = new TypeToken<AbstractApp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Uninstalls an app (asynchronously)
     * Uninstalls an app
     * @param devid The id of device (required)
     * @param appid The id of app (required)
     * @param file  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uninstallApplicationAsync(Integer devid, String appid, File file, final ApiCallback<AbstractApp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uninstallApplicationValidateBeforeCall(devid, appid, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractApp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
