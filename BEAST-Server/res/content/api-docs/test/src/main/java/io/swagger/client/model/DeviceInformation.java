/*
 * Private API
 * Assessment Private API - Do not use!
 *
 * OpenAPI spec version: 0.1
 * Contact: helpdesk@codeinspect.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * Information about a device
 */
@Schema(description = "Information about a device")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-12-21T16:25:16.578+01:00[Europe/Berlin]")
public class DeviceInformation {

  @SerializedName("ID")
  private Integer ID = null;
  /**
   * The state of the device
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    OCCUPIED("OCCUPIED"),
    FREE("FREE"),
    ERROR("ERROR"),
    PREPARING("PREPARING"),
    DISCONNECTED("DISCONNECTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("batteryLevel")
  private Integer batteryLevel = null;

  @SerializedName("reservedBy")
  private String reservedBy = null;

  @SerializedName("type")
  private String type = null;
  /**
  * The id of the device
  * @return ID
  **/
  @Schema(example = "0", required = true, description = "The id of the device")
  public Integer getID() {
    return ID;
  }
  /**
  * The state of the device
  * @return state
  **/
  @Schema(required = true, description = "The state of the device")
  public StateEnum getState() {
    return state;
  }
  /**
  * The battery level (from 0 to 100 percent or -1 if unknown)
  * @return batteryLevel
  **/
  @Schema(required = true, description = "The battery level (from 0 to 100 percent or -1 if unknown)")
  public Integer getBatteryLevel() {
    return batteryLevel;
  }
  /**
  * Who is using the device at the moment
  * @return reservedBy
  **/
  @Schema(description = "Who is using the device at the moment")
  public String getReservedBy() {
    return reservedBy;
  }
  /**
  * Type
  * @return type
  **/
  @Schema(example = "AndroidDeviceRequirements", required = true, description = "Type")
  public String getType() {
    return type;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceInformation deviceInformation = (DeviceInformation) o;
    return Objects.equals(this.ID, deviceInformation.ID) &&
        Objects.equals(this.state, deviceInformation.state) &&
        Objects.equals(this.batteryLevel, deviceInformation.batteryLevel) &&
        Objects.equals(this.reservedBy, deviceInformation.reservedBy) &&
        Objects.equals(this.type, deviceInformation.type);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(ID, state, batteryLevel, reservedBy, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceInformation {\n");
    
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    batteryLevel: ").append(toIndentedString(batteryLevel)).append("\n");
    sb.append("    reservedBy: ").append(toIndentedString(reservedBy)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
