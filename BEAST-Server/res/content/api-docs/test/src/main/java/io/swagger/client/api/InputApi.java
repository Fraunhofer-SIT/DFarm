/*
 * Private API
 * Assessment Private API - Do not use!
 *
 * OpenAPI spec version: 0.1
 * Contact: helpdesk@codeinspect.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AbstractApp;
import io.swagger.client.model.AccessDeniedException;
import io.swagger.client.model.DeviceNotFoundException;
import io.swagger.client.model.DeviceReservationFailedException;
import io.swagger.client.model.Intent;
import io.swagger.client.model.ModelAPIException;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InputApi {
    private ApiClient apiClient;

    public InputApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InputApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for broadcast
     * @param devid The id of device (required)
     * @param receiverPermission The permission a receiver needs to have (required)
     * @param body The intent ot send (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call broadcastCall(Integer devid, String receiverPermission, Intent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/devices/{devid}/input/android/broadcast"
            .replaceAll("\\{" + "devid" + "\\}", apiClient.escapeString(devid.toString()))
            .replaceAll("\\{" + "receiverPermission" + "\\}", apiClient.escapeString(receiverPermission.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call broadcastValidateBeforeCall(Integer devid, String receiverPermission, Intent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'devid' is set
        if (devid == null) {
            throw new ApiException("Missing the required parameter 'devid' when calling broadcast(Async)");
        }
        // verify the required parameter 'receiverPermission' is set
        if (receiverPermission == null) {
            throw new ApiException("Missing the required parameter 'receiverPermission' when calling broadcast(Async)");
        }
        
        com.squareup.okhttp.Call call = broadcastCall(devid, receiverPermission, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sends an intent to the system to start a service
     * Sends an intent to the system to start a service. Android only
     * @param devid The id of device (required)
     * @param receiverPermission The permission a receiver needs to have (required)
     * @param body The intent ot send (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> broadcast(Integer devid, String receiverPermission, Intent body) throws ApiException {
        ApiResponse<List<String>> resp = broadcastWithHttpInfo(devid, receiverPermission, body);
        return resp.getData();
    }

    /**
     * Sends an intent to the system to start a service
     * Sends an intent to the system to start a service. Android only
     * @param devid The id of device (required)
     * @param receiverPermission The permission a receiver needs to have (required)
     * @param body The intent ot send (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> broadcastWithHttpInfo(Integer devid, String receiverPermission, Intent body) throws ApiException {
        com.squareup.okhttp.Call call = broadcastValidateBeforeCall(devid, receiverPermission, body, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sends an intent to the system to start a service (asynchronously)
     * Sends an intent to the system to start a service. Android only
     * @param devid The id of device (required)
     * @param receiverPermission The permission a receiver needs to have (required)
     * @param body The intent ot send (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call broadcastAsync(Integer devid, String receiverPermission, Intent body, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = broadcastValidateBeforeCall(devid, receiverPermission, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startActivity
     * @param devid The id of device (required)
     * @param forceStopBefore Whether to force stop the application before (required)
     * @param waitForDebugger Whether to wait for a debugger (required)
     * @param body The intent ot send (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startActivityCall(Integer devid, Boolean forceStopBefore, Boolean waitForDebugger, Intent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/devices/{devid}/input/android/startActivity"
            .replaceAll("\\{" + "devid" + "\\}", apiClient.escapeString(devid.toString()))
            .replaceAll("\\{" + "forceStopBefore" + "\\}", apiClient.escapeString(forceStopBefore.toString()))
            .replaceAll("\\{" + "waitForDebugger" + "\\}", apiClient.escapeString(waitForDebugger.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startActivityValidateBeforeCall(Integer devid, Boolean forceStopBefore, Boolean waitForDebugger, Intent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'devid' is set
        if (devid == null) {
            throw new ApiException("Missing the required parameter 'devid' when calling startActivity(Async)");
        }
        // verify the required parameter 'forceStopBefore' is set
        if (forceStopBefore == null) {
            throw new ApiException("Missing the required parameter 'forceStopBefore' when calling startActivity(Async)");
        }
        // verify the required parameter 'waitForDebugger' is set
        if (waitForDebugger == null) {
            throw new ApiException("Missing the required parameter 'waitForDebugger' when calling startActivity(Async)");
        }
        
        com.squareup.okhttp.Call call = startActivityCall(devid, forceStopBefore, waitForDebugger, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sends an intent to the system to start an activity
     * Sends an intent to the system to start an activity. Android only
     * @param devid The id of device (required)
     * @param forceStopBefore Whether to force stop the application before (required)
     * @param waitForDebugger Whether to wait for a debugger (required)
     * @param body The intent ot send (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> startActivity(Integer devid, Boolean forceStopBefore, Boolean waitForDebugger, Intent body) throws ApiException {
        ApiResponse<List<String>> resp = startActivityWithHttpInfo(devid, forceStopBefore, waitForDebugger, body);
        return resp.getData();
    }

    /**
     * Sends an intent to the system to start an activity
     * Sends an intent to the system to start an activity. Android only
     * @param devid The id of device (required)
     * @param forceStopBefore Whether to force stop the application before (required)
     * @param waitForDebugger Whether to wait for a debugger (required)
     * @param body The intent ot send (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> startActivityWithHttpInfo(Integer devid, Boolean forceStopBefore, Boolean waitForDebugger, Intent body) throws ApiException {
        com.squareup.okhttp.Call call = startActivityValidateBeforeCall(devid, forceStopBefore, waitForDebugger, body, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sends an intent to the system to start an activity (asynchronously)
     * Sends an intent to the system to start an activity. Android only
     * @param devid The id of device (required)
     * @param forceStopBefore Whether to force stop the application before (required)
     * @param waitForDebugger Whether to wait for a debugger (required)
     * @param body The intent ot send (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startActivityAsync(Integer devid, Boolean forceStopBefore, Boolean waitForDebugger, Intent body, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startActivityValidateBeforeCall(devid, forceStopBefore, waitForDebugger, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startForegroundService
     * @param devid The id of device (required)
     * @param body The intent ot send (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startForegroundServiceCall(Integer devid, Intent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/devices/{devid}/input/android/startForegroundService"
            .replaceAll("\\{" + "devid" + "\\}", apiClient.escapeString(devid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startForegroundServiceValidateBeforeCall(Integer devid, Intent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'devid' is set
        if (devid == null) {
            throw new ApiException("Missing the required parameter 'devid' when calling startForegroundService(Async)");
        }
        
        com.squareup.okhttp.Call call = startForegroundServiceCall(devid, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sends an intent to the system to start a service
     * Sends an intent to the system to start a service. Android only
     * @param devid The id of device (required)
     * @param body The intent ot send (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> startForegroundService(Integer devid, Intent body) throws ApiException {
        ApiResponse<List<String>> resp = startForegroundServiceWithHttpInfo(devid, body);
        return resp.getData();
    }

    /**
     * Sends an intent to the system to start a service
     * Sends an intent to the system to start a service. Android only
     * @param devid The id of device (required)
     * @param body The intent ot send (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> startForegroundServiceWithHttpInfo(Integer devid, Intent body) throws ApiException {
        com.squareup.okhttp.Call call = startForegroundServiceValidateBeforeCall(devid, body, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sends an intent to the system to start a service (asynchronously)
     * Sends an intent to the system to start a service. Android only
     * @param devid The id of device (required)
     * @param body The intent ot send (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startForegroundServiceAsync(Integer devid, Intent body, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startForegroundServiceValidateBeforeCall(devid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startService
     * @param devid The id of device (required)
     * @param body The intent ot send (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startServiceCall(Integer devid, Intent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/devices/{devid}/input/android/startService"
            .replaceAll("\\{" + "devid" + "\\}", apiClient.escapeString(devid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startServiceValidateBeforeCall(Integer devid, Intent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'devid' is set
        if (devid == null) {
            throw new ApiException("Missing the required parameter 'devid' when calling startService(Async)");
        }
        
        com.squareup.okhttp.Call call = startServiceCall(devid, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sends an intent to the system to start a service
     * Sends an intent to the system to start a service. Android only
     * @param devid The id of device (required)
     * @param body The intent ot send (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> startService(Integer devid, Intent body) throws ApiException {
        ApiResponse<List<String>> resp = startServiceWithHttpInfo(devid, body);
        return resp.getData();
    }

    /**
     * Sends an intent to the system to start a service
     * Sends an intent to the system to start a service. Android only
     * @param devid The id of device (required)
     * @param body The intent ot send (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> startServiceWithHttpInfo(Integer devid, Intent body) throws ApiException {
        com.squareup.okhttp.Call call = startServiceValidateBeforeCall(devid, body, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sends an intent to the system to start a service (asynchronously)
     * Sends an intent to the system to start a service. Android only
     * @param devid The id of device (required)
     * @param body The intent ot send (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startServiceAsync(Integer devid, Intent body, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startServiceValidateBeforeCall(devid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopService
     * @param devid The id of device (required)
     * @param body The intent ot send (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopServiceCall(Integer devid, Intent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/devices/{devid}/input/android/stopService"
            .replaceAll("\\{" + "devid" + "\\}", apiClient.escapeString(devid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopServiceValidateBeforeCall(Integer devid, Intent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'devid' is set
        if (devid == null) {
            throw new ApiException("Missing the required parameter 'devid' when calling stopService(Async)");
        }
        
        com.squareup.okhttp.Call call = stopServiceCall(devid, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sends an intent to the system to stop a service
     * Sends an intent to the system to stop a service. Android only
     * @param devid The id of device (required)
     * @param body The intent ot send (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> stopService(Integer devid, Intent body) throws ApiException {
        ApiResponse<List<String>> resp = stopServiceWithHttpInfo(devid, body);
        return resp.getData();
    }

    /**
     * Sends an intent to the system to stop a service
     * Sends an intent to the system to stop a service. Android only
     * @param devid The id of device (required)
     * @param body The intent ot send (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> stopServiceWithHttpInfo(Integer devid, Intent body) throws ApiException {
        com.squareup.okhttp.Call call = stopServiceValidateBeforeCall(devid, body, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sends an intent to the system to stop a service (asynchronously)
     * Sends an intent to the system to stop a service. Android only
     * @param devid The id of device (required)
     * @param body The intent ot send (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopServiceAsync(Integer devid, Intent body, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopServiceValidateBeforeCall(devid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tap
     * @param devid The id of device (required)
     * @param x The x coordinate (required)
     * @param y The y coordinate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tapCall(Integer devid, Integer x, Integer y, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/devices/{devid}/input/tap"
            .replaceAll("\\{" + "devid" + "\\}", apiClient.escapeString(devid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (x != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("x", x));
        if (y != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("y", y));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tapValidateBeforeCall(Integer devid, Integer x, Integer y, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'devid' is set
        if (devid == null) {
            throw new ApiException("Missing the required parameter 'devid' when calling tap(Async)");
        }
        // verify the required parameter 'x' is set
        if (x == null) {
            throw new ApiException("Missing the required parameter 'x' when calling tap(Async)");
        }
        // verify the required parameter 'y' is set
        if (y == null) {
            throw new ApiException("Missing the required parameter 'y' when calling tap(Async)");
        }
        
        com.squareup.okhttp.Call call = tapCall(devid, x, y, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Taps on screen
     * Taps on screen
     * @param devid The id of device (required)
     * @param x The x coordinate (required)
     * @param y The y coordinate (required)
     * @return AbstractApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractApp tap(Integer devid, Integer x, Integer y) throws ApiException {
        ApiResponse<AbstractApp> resp = tapWithHttpInfo(devid, x, y);
        return resp.getData();
    }

    /**
     * Taps on screen
     * Taps on screen
     * @param devid The id of device (required)
     * @param x The x coordinate (required)
     * @param y The y coordinate (required)
     * @return ApiResponse&lt;AbstractApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractApp> tapWithHttpInfo(Integer devid, Integer x, Integer y) throws ApiException {
        com.squareup.okhttp.Call call = tapValidateBeforeCall(devid, x, y, null, null);
        Type localVarReturnType = new TypeToken<AbstractApp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Taps on screen (asynchronously)
     * Taps on screen
     * @param devid The id of device (required)
     * @param x The x coordinate (required)
     * @param y The y coordinate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tapAsync(Integer devid, Integer x, Integer y, final ApiCallback<AbstractApp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tapValidateBeforeCall(devid, x, y, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractApp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for typeText
     * @param devid The id of device (required)
     * @param text The text (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call typeTextCall(Integer devid, String text, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/devices/{devid}/input/typeText"
            .replaceAll("\\{" + "devid" + "\\}", apiClient.escapeString(devid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call typeTextValidateBeforeCall(Integer devid, String text, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'devid' is set
        if (devid == null) {
            throw new ApiException("Missing the required parameter 'devid' when calling typeText(Async)");
        }
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling typeText(Async)");
        }
        
        com.squareup.okhttp.Call call = typeTextCall(devid, text, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Inputs text
     * Inputs text
     * @param devid The id of device (required)
     * @param text The text (required)
     * @return AbstractApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractApp typeText(Integer devid, String text) throws ApiException {
        ApiResponse<AbstractApp> resp = typeTextWithHttpInfo(devid, text);
        return resp.getData();
    }

    /**
     * Inputs text
     * Inputs text
     * @param devid The id of device (required)
     * @param text The text (required)
     * @return ApiResponse&lt;AbstractApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractApp> typeTextWithHttpInfo(Integer devid, String text) throws ApiException {
        com.squareup.okhttp.Call call = typeTextValidateBeforeCall(devid, text, null, null);
        Type localVarReturnType = new TypeToken<AbstractApp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Inputs text (asynchronously)
     * Inputs text
     * @param devid The id of device (required)
     * @param text The text (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call typeTextAsync(Integer devid, String text, final ApiCallback<AbstractApp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = typeTextValidateBeforeCall(devid, text, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractApp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
