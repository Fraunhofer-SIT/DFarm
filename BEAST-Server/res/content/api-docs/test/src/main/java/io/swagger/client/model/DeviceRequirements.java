/*
 * Private API
 * Assessment Private API - Do not use!
 *
 * OpenAPI spec version: 0.1
 * Contact: helpdesk@codeinspect.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * Device requirements
 */
@Schema(description = "Device requirements")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-12-21T16:25:16.578+01:00[Europe/Berlin]")
public class DeviceRequirements {

  @SerializedName("minBatteryLevel")
  private Integer minBatteryLevel = 30;
  /**
   * A required state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    OCCUPIED("OCCUPIED"),
    FREE("FREE"),
    ERROR("ERROR"),
    PREPARING("PREPARING"),
    DISCONNECTED("DISCONNECTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("reservedBy")
  private String reservedBy = null;
  public DeviceRequirements minBatteryLevel(Integer minBatteryLevel) {
    this.minBatteryLevel = minBatteryLevel;
    return this;
  }

  

  /**
  * The minimum battery level (-1 if don&#x27;t care)
  * @return minBatteryLevel
  **/
  @Schema(required = true, description = "The minimum battery level (-1 if don't care)")
  public Integer getMinBatteryLevel() {
    return minBatteryLevel;
  }
  public void setMinBatteryLevel(Integer minBatteryLevel) {
    this.minBatteryLevel = minBatteryLevel;
  }
  public DeviceRequirements state(StateEnum state) {
    this.state = state;
    return this;
  }

  

  /**
  * A required state
  * @return state
  **/
  @Schema(example = "FREE", description = "A required state")
  public StateEnum getState() {
    return state;
  }
  public void setState(StateEnum state) {
    this.state = state;
  }
  public DeviceRequirements type(String type) {
    this.type = type;
    return this;
  }

  

  /**
  * Type
  * @return type
  **/
  @Schema(example = "AndroidDeviceRequirements", required = true, description = "Type")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }
  public DeviceRequirements reservedBy(String reservedBy) {
    this.reservedBy = reservedBy;
    return this;
  }

  

  /**
  * The device must be reserved by the given user
  * @return reservedBy
  **/
  @Schema(description = "The device must be reserved by the given user")
  public String getReservedBy() {
    return reservedBy;
  }
  public void setReservedBy(String reservedBy) {
    this.reservedBy = reservedBy;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceRequirements deviceRequirements = (DeviceRequirements) o;
    return Objects.equals(this.minBatteryLevel, deviceRequirements.minBatteryLevel) &&
        Objects.equals(this.state, deviceRequirements.state) &&
        Objects.equals(this.type, deviceRequirements.type) &&
        Objects.equals(this.reservedBy, deviceRequirements.reservedBy);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(minBatteryLevel, state, type, reservedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceRequirements {\n");
    
    sb.append("    minBatteryLevel: ").append(toIndentedString(minBatteryLevel)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    reservedBy: ").append(toIndentedString(reservedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
