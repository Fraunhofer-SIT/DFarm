/*
 * Private API
 * Assessment Private API - Do not use!
 *
 * OpenAPI spec version: 0.1
 * Contact: helpdesk@codeinspect.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * Information about a file
 */
@Schema(description = "Information about a file")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-12-21T16:25:16.578+01:00[Europe/Berlin]")public class FileOnDevice {

  @SerializedName("name")
  private String name = null;

  @SerializedName("directory")
  private Boolean directory = null;

  @SerializedName("file")
  private Boolean file = null;

  @SerializedName("size")
  private Long size = null;

  @SerializedName("lastModified")
  private OffsetDateTime lastModified = null;

  @SerializedName("fullPath")
  private String fullPath = null;
  /**
  * The short name of the file
  * @return name
  **/
  @Schema(example = "foo.txt", required = true, description = "The short name of the file")
  public String getName() {
    return name;
  }
  /**
  * Whether the file is directory
  * @return directory
  **/
  @Schema(required = true, description = "Whether the file is directory")
  public Boolean isDirectory() {
    return directory;
  }
  /**
  * Whether the file is a real file
  * @return file
  **/
  @Schema(required = true, description = "Whether the file is a real file")
  public Boolean isFile() {
    return file;
  }
  /**
  * The size of the file in bytes
  * @return size
  **/
  @Schema(example = "2048", description = "The size of the file in bytes")
  public Long getSize() {
    return size;
  }
  /**
  * Last modification date
  * @return lastModified
  **/
  @Schema(description = "Last modification date")
  public OffsetDateTime getLastModified() {
    return lastModified;
  }
  /**
  * Full path
  * @return fullPath
  **/
  @Schema(required = true, description = "Full path")
  public String getFullPath() {
    return fullPath;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileOnDevice fileOnDevice = (FileOnDevice) o;
    return Objects.equals(this.name, fileOnDevice.name) &&
        Objects.equals(this.directory, fileOnDevice.directory) &&
        Objects.equals(this.file, fileOnDevice.file) &&
        Objects.equals(this.size, fileOnDevice.size) &&
        Objects.equals(this.lastModified, fileOnDevice.lastModified) &&
        Objects.equals(this.fullPath, fileOnDevice.fullPath);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, directory, file, size, lastModified, fullPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileOnDevice {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    directory: ").append(toIndentedString(directory)).append("\n");
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    fullPath: ").append(toIndentedString(fullPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
